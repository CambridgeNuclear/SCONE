
type implicitPhysicsPackage;

method         IMC;
pop            500000;
limit          2000000;
steps          100;
timeStep       0.01;
units          ns;

collisionOperator {
                    photonMG {type IMCMGstd;}
                  } 

transportOperator {
                    //type transportOperatorTime;
                    type transportOperatorGeomHT;
                    cutoff 0.5;
                    geometry { type geometryGrid; boundary (0 0 0 0 1 1); dimensions (40 40 1);
                               bounds (-0.5 -0.5 -0.5 0.5 0.5 0.5); gridOnly y; }
                    searchN (200 200 1);
                  } 

source {
  type blackBodySource;
  distribution surface;
  surface -x;
  temp 1;
}

viz { vizDict { type vtk; corner (-0.5 -0.5 -0.5); width (1 1 1); vox (20 20 1); } }

tally  {
	   }

geometry { 
    type geometryGrid;
    dimensions (200 200 1);
    boundary (0 0 0 0 1 1);
    graph {type shrunk;}

    surfaces
    {
      outer     { id 1; type box; origin ( 0.0  0.0  0.0); halfwidth ( 0.5 0.5 0.5); }
      xPlane1   { id 2; type xPlane; x0 -0.45; }
      xPlane2   { id 3; type xPlane; x0 -0.25; }
      xPlane3   { id 4; type xPlane; x0 0.25; }
      xPlane4   { id 5; type xPlane; x0 0.45; }
      yPlane1   { id 6; type yPlane; y0 -0.45; }
      yPlane2   { id 7; type yPlane; y0 -0.25; }
      yPlane3   { id 8; type yPlane; y0 0.25; }
      yPlane4   { id 9; type yPlane; y0 0.45; }
    }

    cells {
      // Top mat
      cell1 { id 1; type simpleCell; surfaces (9); filltype mat; material mat1; }
      // Bottom mat
      cell2 { id 2; type simpleCell; surfaces (-6); filltype mat; material mat1; }
      // Right side mat
      cell3 { id 3; type simpleCell; surfaces (5 6 -9); filltype mat; material mat1; }
      // Left side mat
      cell4 { id 4; type simpleCell; surfaces (-2 7 -8); filltype mat; material mat1; }
      // Centre mat
      cell5 { id 5; type simpleCell; surfaces (3 -4 7 -8); filltype mat; material mat1; }
      // Top void
      cell6 { id 6; type simpleCell; surfaces (8 -9 -5); filltype mat; material void; }
      // Bottom void
      cell7 { id 7; type simpleCell; surfaces (6 -7 -5); filltype mat; material void; }
      // Right void
      cell8 { id 8; type simpleCell; surfaces (7 -8 4 -5); filltype mat; material void; }
      // Left void
      cell9 { id 9; type simpleCell; surfaces (7 -8 2 -3); filltype mat; material void; }
    }

    universes
    {
      root  { id 1; type rootUniverse; border 1; fill u<2>; }
      cells { id 2; type cellUniverse; cells (1 2 3 4 5 6 7 8 9); }
    }

}

nuclearData {

  handles { 
     mg { type baseMgIMCDatabase; }
  }
  
  
  materials {

    mat1 { temp 0.000001; composition {} xsFile ./DataFiles/hohlraumData; }

  }

}



