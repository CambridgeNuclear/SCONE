type fixedSourceRRPhysicsPackage; 

lin 1;
pop      2000;
pop      120;
active   4000;  
inactive 1000; 
dead     100; 
termination 500; 
plot 1;
cache 1;
XSdata   mg; 
dataType mg;
outputFile dogleg_TRRM_scatter_coarse;

source { sourceMat ( 1.0 ); }
integrate (sourceMat absorber);

samplePoints {
A3_1   ( 5.0 5.0 5.0 );
A3_2   ( 5.0 15.0 5.0 );
A3_3   ( 5.0 25.0 5.0 );
A3_4   ( 5.0 35.0 5.0 );
A3_5   ( 5.0 45.0 5.0 );
A3_6   ( 5.0 55.0 5.0 );
A3_7   ( 5.0 65.0 5.0 );
A3_8   ( 5.0 75.0 5.0 );
A3_9   ( 5.0 85.0 5.0 );
A3_10   ( 5.0 95.0 5.0 );
B3_1    (5.0 55.0 5.0);
B3_2    (15.0 55.0 5.0);
B3_3    (25.0 55.0 5.0);
B3_4    (35.0 55.0 5.0);
B3_5    (45.0 55.0 5.0);
B3_6    (55.0 55.0 5.0);
C3_1    (5.0 95.0 35.0);
C3_2    (15.0 95.0 35.0);
C3_3    (25.0 95.0 35.0);
C3_4    (35.0 95.0 35.0);
C3_5    (45.0 95.0 35.0);
C3_6    (55.0 95.0 35.0);

}

geometry { 
  type geometryStd; 
  // ( -x, +x, -y, +y, -z, +z)
  boundary ( 1 0 1 0 1 0 ); 
  graph { type extended; }

  surfaces { 
             Domain  { id 3; type box; origin ( 30.0 50.0 30.0 ); halfwidth ( 30.0 50.0 30.0 ); }  	
  }
  
  cells {  }
  
  universes { 
    	root { id 1000; type rootUniverse; border 3; fill u<100>; }  
    
    // Pin universes 
    pin1 { type pinUniverse; id 1; radii ( 0.0 ); fills ( absorber ); }
    pin2 { type pinUniverse; id 2; radii ( 0.0 ); fills ( voidMat ); }
    pin3 { type pinUniverse; id 3; radii ( 0.0 ); fills ( sourceMat ); }

// Lattices
latAbsCentred {
      id 15; 
      type latUniverse; 
      origin ( 0.0 0.0 0.0 ); 
      pitch ( 3.333333333333333333 3.3333333333333333 3.33333333333333333 );
      shape ( 3 3 3 ); 
      padMat absorber; 
      map ( 
 1 1 1 1 1 1 1 1 1
 1 1 1 1 1 1 1 1 1
 1 1 1 1 1 1 1 1 1
);
}

latVoidCentred {
      id 25; 
      type latUniverse; 
      origin ( 0.0 0.0 0.0 ); 
      pitch ( 3.33333333333333333333 3.333333333333333333 3.333333333333333333);
      shape ( 3 3 3 ); 
      padMat voidMat; 
      map ( 
2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2
);
}

latSourceCentred {
      id 35; 
      type latUniverse; 
      origin ( 0.0 0.0 0.0 ); 
      pitch ( 3.3333333333333333333 3.3333333333333333333 3.3333333333333333333 );
      shape ( 3 3 3 ); 
      padMat sourceMat; 
      map ( 
3 3 3 3 3 3 3 3 3
3 3 3 3 3 3 3 3 3
3 3 3 3 3 3 3 3 3
);
}

latGeom
{
  id 100;
  type latUniverse; 
  origin ( 30.0 50.0 30.0 ); 
  pitch ( 10.0 10.0 10.0 );
  shape ( 6 10 6 ); 
  padMat absorber; 
  map ( 

15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15

15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15

15 15 15 25 15 15
15 15 15 25 15 15
15 15 15 25 15 15
15 15 15 25 15 15
15 15 15 25 15 15
15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15

15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 25 15 15
15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15

15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 25 15 15
15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15

15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15
15 15 15 15 15 15
25 25 25 25 15 15
25 15 15 15 15 15
25 15 15 15 15 15
25 15 15 15 15 15
25 15 15 15 15 15
35 15 15 15 15 15

);
}
		
} 

}

viz {
  myVTK {
    type vtk;
    what uniqueID; 
    corner ( 0.0 0.0 0.0 );
    width ( 60.0 100.0 60.0 );
    vox ( 60 100 60 );
  }
} 


nuclearData {
  handles { 
    mg { type baseMgNeutronDatabase; PN P0;} 
  } 
  materials { 
      
    absorber { 
      temp 300;
      xsFile ./XS_dog/absorberS;
      composition { } 
   }

    voidMat { 
       temp 300; 
       xsFile ./XS_dog/voidS;
       composition {  }
   }
	  
    sourceMat { 
       temp 300; 
       xsFile ./XS_dog/absorberS;
       composition { }
    } 
	   
}
}


